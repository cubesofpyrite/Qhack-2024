# Define your device

dev = qml.device('default.qubit', wires=1)

@qml.qnode(dev)
def random_gate(p,q,r):

    """
    Applies a Pauli X, Pauli Y, Pauli Z or does nothing at random.

    Args:
        - p (float): probability of applying Pauli X.
        - q (float): probability of applying Pauli Y.
        - r (float): probability of applying Pauli Z.

    Returns:
        - (np.tensor(float)): Measurement probabilities in the computational basis.

    """

    # Put your code here
    
    # Density matrix would be 
    # rho = p+q |0><0| + (1-p-q) |1><1|
    
    # return np.tensor([p+q,1-(p+q)])
    qml.StatePrep(np.tensor([np.sqrt(1-(p+q)),np.sqrt(p+q)]),wires=0)
    
    return qml.probs(wires=0)
    
# These functions are responsible for testing the solution.


def run(test_case_input: str) -> str:
    ins = np.array(json.loads(test_case_input))
    outs = random_gate(*ins).tolist()
    return str(outs)


def check(solution_output: str, expected_output: str) -> None:
    solution_output = json.loads(solution_output)
    expected_output = json.loads(expected_output)

    assert np.allclose(solution_output, expected_output, rtol = 1e-4), "Not the correct probabilities"
